//
// Copyright (c) Antmicro
// Copyright (c) Realtime Embedded
//
// This file is part of the Emul8 project.
// Full license details are defined in the 'LICENSE' file.
//
using Antmicro.OptionsParser;
using Emul8.Bootstrap.Elements.Projects;

namespace Emul8.Bootstrap
{
    public class Options : IValidatedOptions
    {
        [Name('i', "interactive"), Description("Run bootstrapper in the interactive mode based on ncurses.")]
        public bool Interactive { get; set; }
        
        [Name('d', "directories"), Delimiter(';'), DefaultValue(new [] { "." }), Description("List of directories to scan/clean.")]
        public string[] Directories { get; set; }
        
        [Description("Type of project to scan for."), DefaultValue(ProjectType.Unknown)]
        public ProjectType Type { get; set; }
        
        [Name("additional-projects"), Delimiter(';'), Description("List of names of additional projects for the generated solution.")]
        public string[] AdditionalProjects { get; set; }
        
        [Name("main-project"), Description("Name of the main project for generated solution.")]
        public string MainProject { get; set; }

        [Name("output-directory"), Description("Path to the directory where generated files should be stored"), DefaultValue(".")]
        public string OutputDirectory { get; set; }

        [Name("binaries-directory"), Description("Path to the directory where binaries compiled from generated project should be located"), DefaultValue("bin")]
        public string BinariesDirectory { get; set; }

        [Name("generate-entry-project"), Description("Generates entry project. Cannot be used without setting `output-directory`."), DefaultValue(false)]
        public bool GenerateEntryProject { get; set; }
        
        [PositionalArgument(0), DefaultValue(Operation.None)]
        public Operation Action { get; set; }

        public bool Validate(out string error)
        {
            if(!Interactive && Action == Operation.None)
            {
                error = "Action is required in batch mode.";
                return false;
            }

            if(Type != ProjectType.Unknown && Action != Operation.Scan)
            {
                error = "'Type' option is available only for 'Scan' action";
                return false;
            }

            if(GenerateEntryProject && OutputDirectory == null)
            {
                error = "Cannot generate entry project when output is not saved to a solution file";
                return false;
            }
            
            error = null;
            return true;
        }
    }
    
    public enum Operation
    {
        [Hide]
        None,
        [Description("Scan selected 'directories' for project files of given 'type'.")]
        Scan,
        [Description("Generate solution file based on 'main-project' and 'additional-projects'. Save output ot 'output' file.")]
        GenerateSolution,
        [Description("Generate solution file based on all encountered project files. Save output to 'output' file.")]
        GenerateAll,
        [Description("Remove all files generated by bootstrapper.")]
        Clean
    }
}


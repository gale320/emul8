<#
//
// Copyright (c) Antmicro
// Copyright (c) Realtime Embedded
//
// This file is part of the Emul8 project.
// Full license details are defined in the 'LICENSE' file.
//
#>
<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="RegisterEnumParserContent.tt" #>
<#
    if(CLASS_NAME == null)
    {
        throw new ArgumentException("CLASS_NAME variable not set");
    }
    if(HEADER_FILE == null)
    {
        throw new ArgumentException("HEADER_FILE variable not set");
    }

    RegistersEnumParser parser;
    var baseDirectoryPath = Directory.GetParent(Path.GetDirectoryName(((ITextTemplatingEngineHost)this.Host).TemplateFile)).Parent.Parent.FullName;
    var fullPath = Path.Combine(baseDirectoryPath, HEADER_FILE);
    using(var stream = File.OpenRead(fullPath))
    {
        parser = new RegistersEnumParser(stream, DEFINES);
    }

    if(PC_REGISTER != null)
    {
        parser.Map("PC", PC_REGISTER);
    }

    foreach(var ignored in REGISTERS_FROM_BASE_CLASS)
    {
        parser.Ignore(ignored);
    }

    var virtualRegisters = new HashSet<string> { "PC" };
#>
/********************************************************
*
* Warning!
* This file was generated automatically.
* Please do not edit. Changes should be made in the
* appropriate *.tt file.
*
*/
using System;
using System.Collections.Generic;
using Emul8.Peripherals.CPU.Registers;
using Emul8.Utilities.Binding;

namespace Emul8.Peripherals.CPU
{
    public partial class <#=CLASS_NAME#>
    {
        public override void SetRegisterUnsafe(int register, uint value)
        {
            SetRegisterValue32(register, value);
        }

        public override uint GetRegisterUnsafe(int register)
        {
            return GetRegisterValue32(register);
        }
        
        public override int[] GetRegisters()
        {
            return new int[] {
<#
    foreach(var register in 
        parser.Registers.Where(x => !x.IsIgnored).Select(x => x.Value)
        .Union(parser.RegisterGroups.Where(x => !x.IsIgnored).SelectMany(x => x.IndexValueMap.Values))
        .OrderBy(x => x))
    {
#>
                <#=register#>,
<#
    }
#>
            };
        }

<#
    foreach(var register in parser.Registers.Where(x => !x.IsIgnored))
    {
#>
        [Register]
        public <#= virtualRegisters.Contains(register.Name) ? "override " : "" #><#=RegisterTypeHelper.GetTypeName(register.Width)#> <#=register.Name#>
        {
            get
            {
                return GetRegisterValue<#=register.Width#>((int)<#=CLASS_NAME#>Registers.<#=register.Name#>);
            }
            set
            {
<#
        if(BEFORE_WRITE_HOOKS.ContainsKey(register.Name))
        {
#>
                value = <#=BEFORE_WRITE_HOOKS[register.Name]#>(value);
<#
        }
#>
                SetRegisterValue<#=register.Width#>((int)<#=CLASS_NAME#>Registers.<#=register.Name#>, value);
<#
        if(AFTER_WRITE_HOOKS.ContainsKey(register.Name))
        {
#>
                <#=AFTER_WRITE_HOOKS[register.Name]#>(value);
<#
        }
#>
            }
        }

<#
    }

    foreach(var registerGroup in parser.RegisterGroups.Where(x => !x.IsIgnored))
    {
#>
        public RegistersGroup<<#=RegisterTypeHelper.GetTypeName(registerGroup.Width)#>> <#=registerGroup.Name#> { get; private set; }
<#
    }
#>

        protected override void InitializeRegisters()
        {
<#
    if(REGISTERS_FROM_BASE_CLASS.Count > 0)
    {
#>
            base.InitializeRegisters();
<#
    }
    foreach(var registerGroup in parser.RegisterGroups.Where(x => !x.IsIgnored))
    {#>
            indexValueMap<#=registerGroup.Name#> = new Dictionary<int, <#=CLASS_NAME#>Registers>
            {
<#
        foreach(var elem in registerGroup.IndexValueMap)
        {
#>
                { <#=elem.Key#>, <#=CLASS_NAME#>Registers.<#=registerGroup.Name#><#=elem.Key#> },
<#
        }
#>
            };
            <#=registerGroup.Name#> = new RegistersGroup<<#=RegisterTypeHelper.GetTypeName(registerGroup.Width)#>>(
                indexValueMap<#=registerGroup.Name#>.Keys,
                i => GetRegisterValue<#=registerGroup.Width#>((int)indexValueMap<#=registerGroup.Name#>[i]),
                (i, v) => SetRegisterValue<#=registerGroup.Width#>((int)indexValueMap<#=registerGroup.Name#>[i], v));

<#
    }
#>
        }

<#
    var ignoredWidths = parser.RegisterGroups.Where(x => x.IsIgnored).Select(x => x.Width).Union(parser.Registers.Where(x => x.IsIgnored).Select(x => x.Width)).Distinct();
    foreach(var width in parser.RegisterGroups.Select(x => x.Width).Union(parser.Registers.Select(x => x.Width)).Except(ignoredWidths).Distinct())
    {
#>
        [Import(Name = "tlib_set_register_value_<#=width#>")]
        protected ActionInt32<#=RegisterTypeHelper.GetTypeName(width)#> SetRegisterValue<#=width#>;
        [Import(Name = "tlib_get_register_value_<#=width#>")]
        protected Func<#=RegisterTypeHelper.GetTypeName(width)#>Int32 GetRegisterValue<#=width#>;

<#
    }

    foreach(var registerGroup in parser.RegisterGroups.Where(x => !x.IsIgnored))
    {
#>
        private Dictionary<int, <#=CLASS_NAME#>Registers> indexValueMap<#=registerGroup.Name#>;
<#
    }
#>
    }

    public enum <#=CLASS_NAME#>Registers
    {
<#
    foreach(var register in parser.Registers.Where(x => !x.IsIgnored))
    {
#>
        <#=register.Name#> = <#=register.Value#>,
<#
    }

    foreach(var registerGroup in parser.RegisterGroups.Where(x => !x.IsIgnored))
    {
        foreach(var index in registerGroup.IndexValueMap.OrderBy(x => x.Key))
        {
#>
        <#=registerGroup.Name#><#=index.Key#> = <#=index.Value#>,
<#
        }
    }
#>
    }
}
